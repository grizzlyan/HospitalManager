// <auto-generated />
using System;
using HospitalManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HospitalManager.Data.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211213200557_SeedDoctors")]
    partial class SeedDoctors
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HospitalManager.Data.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HospitalManager.Data.Entities.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PathToPhoto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = 101,
                            FirstName = "Виктор",
                            LastName = "Фёдоров",
                            PathToPhoto = "01.jpg",
                            SpecializationId = 1
                        },
                        new
                        {
                            Id = 102,
                            FirstName = "Ольга",
                            LastName = "Нифёдова",
                            PathToPhoto = "02.jpg",
                            SpecializationId = 2
                        },
                        new
                        {
                            Id = 103,
                            FirstName = "Игорь",
                            LastName = "Кецман",
                            PathToPhoto = "03.jpg",
                            SpecializationId = 3
                        },
                        new
                        {
                            Id = 104,
                            FirstName = "Виктория",
                            LastName = "Духова",
                            PathToPhoto = "04.jpg",
                            SpecializationId = 4
                        },
                        new
                        {
                            Id = 105,
                            FirstName = "Игорь",
                            LastName = "Кедис",
                            PathToPhoto = "05.jpg",
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 106,
                            FirstName = "Катерина",
                            LastName = "Ластова",
                            PathToPhoto = "06.jpg",
                            SpecializationId = 2
                        },
                        new
                        {
                            Id = 107,
                            FirstName = "Владислав",
                            LastName = "Подоляк",
                            PathToPhoto = "07.jpg",
                            SpecializationId = 7
                        },
                        new
                        {
                            Id = 108,
                            FirstName = "Марина",
                            LastName = "Травкина",
                            PathToPhoto = "08.jpg",
                            SpecializationId = 8
                        },
                        new
                        {
                            Id = 109,
                            FirstName = "Евгений",
                            LastName = "Синсов",
                            PathToPhoto = "09.jpg",
                            SpecializationId = 3
                        },
                        new
                        {
                            Id = 110,
                            FirstName = "Виолетта",
                            LastName = "Яценко",
                            PathToPhoto = "10.jpg",
                            SpecializationId = 10
                        },
                        new
                        {
                            Id = 111,
                            FirstName = "Сергей",
                            LastName = "Приходько",
                            PathToPhoto = "11.jpg",
                            SpecializationId = 11
                        },
                        new
                        {
                            Id = 112,
                            FirstName = "Любовь",
                            LastName = "Брендёва",
                            PathToPhoto = "12.jpg",
                            SpecializationId = 12
                        },
                        new
                        {
                            Id = 113,
                            FirstName = "Тарас",
                            LastName = "Можайский",
                            PathToPhoto = "13.jpg",
                            SpecializationId = 13
                        },
                        new
                        {
                            Id = 114,
                            FirstName = "Юлия",
                            LastName = "Вайина",
                            PathToPhoto = "14.jpg",
                            SpecializationId = 14
                        },
                        new
                        {
                            Id = 115,
                            FirstName = "Сергей",
                            LastName = "Вратарь",
                            PathToPhoto = "15.jpg",
                            SpecializationId = 15
                        },
                        new
                        {
                            Id = 116,
                            FirstName = "Мирослава",
                            LastName = "Ива",
                            PathToPhoto = "16.jpg",
                            SpecializationId = 16
                        },
                        new
                        {
                            Id = 117,
                            FirstName = "Иван",
                            LastName = "Фоменко",
                            PathToPhoto = "17.jpg",
                            SpecializationId = 17
                        },
                        new
                        {
                            Id = 118,
                            FirstName = "Ника",
                            LastName = "Енистова",
                            PathToPhoto = "18.jpg",
                            SpecializationId = 18
                        },
                        new
                        {
                            Id = 119,
                            FirstName = "Алексей",
                            LastName = "Виноградов",
                            PathToPhoto = "19.jpg",
                            SpecializationId = 19
                        },
                        new
                        {
                            Id = 120,
                            FirstName = "Алёна",
                            LastName = "Осипова",
                            PathToPhoto = "20.jpg",
                            SpecializationId = 20
                        },
                        new
                        {
                            Id = 121,
                            FirstName = "Ярослав",
                            LastName = "Винник",
                            PathToPhoto = "21.jpg",
                            SpecializationId = 21
                        },
                        new
                        {
                            Id = 122,
                            FirstName = "Раиса",
                            LastName = "Ридко",
                            PathToPhoto = "22.jpg",
                            SpecializationId = 22
                        },
                        new
                        {
                            Id = 123,
                            FirstName = "Евгений",
                            LastName = "Анисимов",
                            PathToPhoto = "23.jpg",
                            SpecializationId = 23
                        },
                        new
                        {
                            Id = 124,
                            FirstName = "Ксения",
                            LastName = "Алимова",
                            PathToPhoto = "24.jpg",
                            SpecializationId = 6
                        },
                        new
                        {
                            Id = 125,
                            FirstName = "Сергей",
                            LastName = "Приходько",
                            PathToPhoto = "25.jpg",
                            SpecializationId = 9
                        },
                        new
                        {
                            Id = 126,
                            FirstName = "Арина",
                            LastName = "Метсова",
                            PathToPhoto = "26.jpg",
                            SpecializationId = 1
                        },
                        new
                        {
                            Id = 127,
                            FirstName = "Арсен",
                            LastName = "Кандыба",
                            PathToPhoto = "27.jpg",
                            SpecializationId = 2
                        },
                        new
                        {
                            Id = 128,
                            FirstName = "Инна",
                            LastName = "Бабкова",
                            PathToPhoto = "28.jpg",
                            SpecializationId = 3
                        },
                        new
                        {
                            Id = 129,
                            FirstName = "Артём",
                            LastName = "Калашников",
                            PathToPhoto = "29.jpg",
                            SpecializationId = 4
                        },
                        new
                        {
                            Id = 130,
                            FirstName = "Жанна",
                            LastName = "Амосова",
                            PathToPhoto = "30.jpg",
                            SpecializationId = 5
                        },
                        new
                        {
                            Id = 131,
                            FirstName = "Эрик",
                            LastName = "Борода",
                            PathToPhoto = "31.jpg",
                            SpecializationId = 6
                        },
                        new
                        {
                            Id = 132,
                            FirstName = "Светлана",
                            LastName = "Телиман",
                            PathToPhoto = "32.jpg",
                            SpecializationId = 7
                        },
                        new
                        {
                            Id = 133,
                            FirstName = "Ян",
                            LastName = "Гаврилов",
                            PathToPhoto = "33.jpg",
                            SpecializationId = 8
                        },
                        new
                        {
                            Id = 134,
                            FirstName = "Александра",
                            LastName = "Точко",
                            PathToPhoto = "34.jpg",
                            SpecializationId = 9
                        },
                        new
                        {
                            Id = 135,
                            FirstName = "Александр",
                            LastName = "Новиков",
                            PathToPhoto = "35.jpg",
                            SpecializationId = 10
                        },
                        new
                        {
                            Id = 136,
                            FirstName = "Анастасия",
                            LastName = "Костенюкова",
                            PathToPhoto = "36.jpg",
                            SpecializationId = 11
                        },
                        new
                        {
                            Id = 137,
                            FirstName = "Эмир",
                            LastName = "Тимерян",
                            PathToPhoto = "37.jpg",
                            SpecializationId = 12
                        },
                        new
                        {
                            Id = 138,
                            FirstName = "Наталья",
                            LastName = "Вискунова",
                            PathToPhoto = "38.jpg",
                            SpecializationId = 13
                        },
                        new
                        {
                            Id = 139,
                            FirstName = "Павел",
                            LastName = "Ющенко",
                            PathToPhoto = "39.jpg",
                            SpecializationId = 14
                        },
                        new
                        {
                            Id = 140,
                            FirstName = "Яна",
                            LastName = "Стивенко",
                            PathToPhoto = "40.jpg",
                            SpecializationId = 15
                        },
                        new
                        {
                            Id = 141,
                            FirstName = "Владислав",
                            LastName = "Черников",
                            PathToPhoto = "41.jpg",
                            SpecializationId = 16
                        },
                        new
                        {
                            Id = 142,
                            FirstName = "Юлия",
                            LastName = "Энова",
                            PathToPhoto = "42.jpg",
                            SpecializationId = 17
                        },
                        new
                        {
                            Id = 143,
                            FirstName = "Казимир",
                            LastName = "Евпатов",
                            PathToPhoto = "43.jpg",
                            SpecializationId = 18
                        },
                        new
                        {
                            Id = 144,
                            FirstName = "Алла",
                            LastName = "Малинова",
                            PathToPhoto = "44.jpg",
                            SpecializationId = 19
                        },
                        new
                        {
                            Id = 145,
                            FirstName = "Максим",
                            LastName = "Яценко",
                            PathToPhoto = "45.jpg",
                            SpecializationId = 20
                        },
                        new
                        {
                            Id = 146,
                            FirstName = "Виктория",
                            LastName = "Бабко",
                            PathToPhoto = "46.jpg",
                            SpecializationId = 21
                        },
                        new
                        {
                            Id = 147,
                            FirstName = "Дмитрий",
                            LastName = "Ермоленко",
                            PathToPhoto = "47.jpg",
                            SpecializationId = 22
                        },
                        new
                        {
                            Id = 148,
                            FirstName = "Татьяна",
                            LastName = "Смирнова",
                            PathToPhoto = "48.png",
                            SpecializationId = 23
                        },
                        new
                        {
                            Id = 149,
                            FirstName = "Станислав",
                            LastName = "Актёров",
                            PathToPhoto = "49.jpg",
                            SpecializationId = 6
                        },
                        new
                        {
                            Id = 150,
                            FirstName = "Элина",
                            LastName = "Саенко",
                            PathToPhoto = "50.jpg",
                            SpecializationId = 9
                        });
                });

            modelBuilder.Entity("HospitalManager.Data.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("HospitalManager.Data.Entities.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecializationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Лечение геморроя и других проктологических заболеваний с помощью малоинвазивных методик.",
                            SpecializationName = "Проктология"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Мужская и женская урология.Лечение проблем с потенцией. Консультация андролога.",
                            SpecializationName = "Урология"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Диагностика и лечение патологий шейки матки, воспалительных и невоспалительных заболеваний.",
                            SpecializationName = "Гинекология"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Диагностика и лечение дерматологических заболеваний. Удаление кожных новообразований.",
                            SpecializationName = "Дерматология"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Эффективное лечение заболеваний желудочно-кишечного тракта. Консультации по вопросам питания.",
                            SpecializationName = "Гастроэнтерология"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Диагностика и лечение заболеваний эндокринной системы: ожирения, сахарного диабета и щитовидной железы.",
                            SpecializationName = "Эндокринология"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Лечение заболеваний сердечно-сосудистой системы человека. Проведение ЭКГ, УЗИ сердца.",
                            SpecializationName = "Кардиология"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Диагностика и лечение заболеваний ЛОР-органов (уши, горло, нос). Удаление инородных предметов и серных пробок.",
                            SpecializationName = "Отоларингология"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Диагностика и лечение заболеваний нервной системы человека. Лечение нарушений слуха, речи, памяти.",
                            SpecializationName = "Неврология"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Диагностика и лечение заболеваний молочных желез. Пункция, УЗИ. Консультации маммолога-онколога.",
                            SpecializationName = "Маммология"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Удаление доброкачественных подкожных новообразований малоинвазивными методами. Консультации хирурга.",
                            SpecializationName = "Хирургия"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Диагностика и лечение заболеваний вен (атеросклероз, тромбоз, заболеваний аорты). Лечение варикоза.",
                            SpecializationName = "Флебология"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Диагностика и лечение заболеваний органов дыхания (легкие, бронхи, трахеи). Лечение последствий курения.",
                            SpecializationName = "Пульмонология"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Диагностика, лечение и профилактика аллергии различного происхождения. Анализы на аллергены.",
                            SpecializationName = "Аллергология"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Лечение заболеваний опорно-двигательного аппарата. Укол-блокады, prp-терапия.",
                            SpecializationName = "Травматология"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Диагностика, лечение и профилактика инфекционных заболеваний.",
                            SpecializationName = "Инфектология"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Диагностика и лечение нарушений зрения у взрослых и детей. Подбор средств для зрения.",
                            SpecializationName = "Офтальмология"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Диагностика и лечение заболеваний почек: мочекаменная болезнь, пиелонефрит, хроническая болезнь почек.",
                            SpecializationName = "Нефрология"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Диагностика и лечение различных заболеваний крови и системы кроветворения.",
                            SpecializationName = "Гематология"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Лечение и профилактика заболеваний суставов и соединительной ткани.",
                            SpecializationName = "Ревматология"
                        },
                        new
                        {
                            Id = 21,
                            Description = "Диагностика и лечение пациентов с острыми и тяжелыми психическими состояниями.",
                            SpecializationName = "Психотерапия"
                        },
                        new
                        {
                            Id = 22,
                            Description = "Устранение косметических дефектов, а также деформаций тканей и органов.",
                            SpecializationName = "Пластическая хирургия"
                        },
                        new
                        {
                            Id = 23,
                            Description = "Оперативное лечение заболеваний центральной и периферической нервной системы.",
                            SpecializationName = "Нейрохирургия"
                        });
                });

            modelBuilder.Entity("HospitalManager.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HospitalManager.Data.Entities.Appointment", b =>
                {
                    b.HasOne("HospitalManager.Data.Entities.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManager.Data.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HospitalManager.Data.Entities.Doctor", b =>
                {
                    b.HasOne("HospitalManager.Data.Entities.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManager.Data.Entities.User", "User")
                        .WithMany("Doctors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Specialization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HospitalManager.Data.Entities.Patient", b =>
                {
                    b.HasOne("HospitalManager.Data.Entities.User", "User")
                        .WithMany("Patients")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HospitalManager.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HospitalManager.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HospitalManager.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HospitalManager.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HospitalManager.Data.Entities.Doctor", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("HospitalManager.Data.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("HospitalManager.Data.Entities.Specialization", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HospitalManager.Data.Entities.User", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Patients");
                });
#pragma warning restore 612, 618
        }
    }
}
